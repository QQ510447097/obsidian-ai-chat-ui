/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ChatPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ChatPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        menu.addItem((item) => {
          item.setTitle("\u63D2\u5165\u5BF9\u8BDD\u533A\u57DF").setIcon("message-square").onClick(() => {
            const template = "```chat-ui\nA\uFF1A\u53D1\u8A00\u4EBAA\u540D\u79F0\nB\uFF1A\u53D1\u8A00\u4EBAB\u540D\u79F0\n\uFF08\u5728\u6B64\u8F93\u5165\u5BF9\u8BDD\u5185\u5BB9\uFF09\n```";
            editor.replaceSelection(template);
            editor.setCursor(editor.getCursor().line + 2, 3);
          });
        });
      })
    );
    this.registerMarkdownCodeBlockProcessor("chat-ui", (source, el, ctx) => {
      const lines = source.split("\n");
      const container = el.createDiv({ cls: "chat-container" });
      const [aLine, bLine, ...contentLines] = lines;
      const speakerA = aLine.replace("A\uFF1A", "").trim();
      const speakerB = bLine.replace("B\uFF1A", "").trim();
      let currentSpeaker = null;
      let currentContent = [];
      const isNewBlock = (line) => line.startsWith(`${speakerA}\uFF1A`) || line.startsWith(`${speakerB}\uFF1A`) || line.trim() === "";
      contentLines.forEach((line) => {
        if (isNewBlock(line)) {
          if (currentSpeaker && currentContent.length > 0) {
            this.renderBubble(container, currentSpeaker, speakerA, currentContent.join("\n"));
            currentContent = [];
          }
          if (line.startsWith(`${speakerA}\uFF1A`)) {
            currentSpeaker = speakerA;
            const content = line.slice(speakerA.length + 1).trim();
            if (content)
              currentContent.push(content);
          } else if (line.startsWith(`${speakerB}\uFF1A`)) {
            currentSpeaker = speakerB;
            const content = line.slice(speakerB.length + 1).trim();
            if (content)
              currentContent.push(content);
          }
        } else if (currentSpeaker) {
          currentContent.push(line.trim());
        }
      });
      if (currentSpeaker && currentContent.length > 0) {
        this.renderBubble(container, currentSpeaker, speakerA, currentContent.join("\n"));
      }
    });
  }
  renderBubble(container, speaker, speakerA, content) {
    const isLeft = speaker === speakerA;
    const bubble = container.createDiv({ cls: `chat-bubble ${isLeft ? "left" : "right"}` });
    bubble.createEl("div", {
      cls: "role-tag",
      text: `${speaker}`
    });
    const contentDiv = bubble.createDiv({ cls: "content" });
    contentDiv.innerHTML = content.replace(/（(.*?)）/g, '<em class="action">$1</em>').replace(/\n/g, "<br>");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0IH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhdFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0Ly8gXHU1M0YzXHU5NTJFXHU4M0RDXHU1MzU1XHU2M0QyXHU1MTY1XHU2QTIxXHU2NzdGXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignZWRpdG9yLW1lbnUnLCAobWVudSwgZWRpdG9yKSA9PiB7XHJcblx0XHRcdFx0bWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XHJcblx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdC5zZXRUaXRsZSgnXHU2M0QyXHU1MTY1XHU1QkY5XHU4QkREXHU1MzNBXHU1N0RGJylcclxuXHRcdFx0XHRcdFx0LnNldEljb24oJ21lc3NhZ2Utc3F1YXJlJylcclxuXHRcdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IHRlbXBsYXRlID1cclxuXHRcdFx0XHRcdFx0XHRcdFwiYGBgY2hhdC11aVxcblwiICtcclxuXHRcdFx0XHRcdFx0XHRcdFwiQVx1RkYxQVx1NTNEMVx1OEEwMFx1NEVCQUFcdTU0MERcdTc5RjBcXG5cIiArXHJcblx0XHRcdFx0XHRcdFx0XHRcIkJcdUZGMUFcdTUzRDFcdThBMDBcdTRFQkFCXHU1NDBEXHU3OUYwXFxuXCIgK1xyXG5cdFx0XHRcdFx0XHRcdFx0XCJcdUZGMDhcdTU3MjhcdTZCNjRcdThGOTNcdTUxNjVcdTVCRjlcdThCRERcdTUxODVcdTVCQjlcdUZGMDlcXG5cIiArXHJcblx0XHRcdFx0XHRcdFx0XHRcImBgYFwiO1xyXG5cdFx0XHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHRlbXBsYXRlKTtcclxuXHRcdFx0XHRcdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lICsgMiwgMyk7IC8vIFx1NTE0OVx1NjgwN1x1NUI5QVx1NEY0RFx1NTIzMEFcdTU0MERcdTc5RjBcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pXHJcblx0XHQpO1xyXG5cclxuXHRcdC8vIFx1NkNFOFx1NTE4Q1x1NTkwNFx1NzQwNlx1NTY2OFxyXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKCdjaGF0LXVpJywgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xyXG5cdFx0XHRjb25zdCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdGNvbnN0IGNvbnRhaW5lciA9IGVsLmNyZWF0ZURpdih7IGNsczogJ2NoYXQtY29udGFpbmVyJyB9KTtcclxuXHJcblx0XHRcdC8vIFx1ODlFM1x1Njc5MFx1ODlEMlx1ODI3Mlx1NTQwRFx1NzlGMFxyXG5cdFx0XHRjb25zdCBbYUxpbmUsIGJMaW5lLCAuLi5jb250ZW50TGluZXNdID0gbGluZXM7XHJcblx0XHRcdGNvbnN0IHNwZWFrZXJBID0gYUxpbmUucmVwbGFjZSgnQVx1RkYxQScsICcnKS50cmltKCk7XHJcblx0XHRcdGNvbnN0IHNwZWFrZXJCID0gYkxpbmUucmVwbGFjZSgnQlx1RkYxQScsICcnKS50cmltKCk7XHJcblxyXG5cdFx0XHQvLyBcdTcyQjZcdTYwMDFcdThGRkRcdThFMkFcclxuXHRcdFx0bGV0IGN1cnJlbnRTcGVha2VyOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuXHRcdFx0bGV0IGN1cnJlbnRDb250ZW50OiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuXHRcdFx0Ly8gXHU1QjlBXHU0RTQ5XHU1M0QxXHU4QTAwXHU1NzU3XHU3RUQzXHU2NzVGXHU2NzYxXHU0RUY2XHJcblx0XHRcdGNvbnN0IGlzTmV3QmxvY2sgPSAobGluZTogc3RyaW5nKSA9PlxyXG5cdFx0XHRcdGxpbmUuc3RhcnRzV2l0aChgJHtzcGVha2VyQX1cdUZGMUFgKSB8fFxyXG5cdFx0XHRcdGxpbmUuc3RhcnRzV2l0aChgJHtzcGVha2VyQn1cdUZGMUFgKSB8fFxyXG5cdFx0XHRcdGxpbmUudHJpbSgpID09PSAnJztcclxuXHJcblx0XHRcdC8vIFx1NTkwNFx1NzQwNlx1NkJDRlx1NEUwMFx1ODg0Q1xyXG5cdFx0XHRjb250ZW50TGluZXMuZm9yRWFjaChsaW5lID0+IHtcclxuXHRcdFx0XHRpZiAoaXNOZXdCbG9jayhsaW5lKSkge1xyXG5cdFx0XHRcdFx0Ly8gXHU5MDQ3XHU1MjMwXHU2NUIwXHU1NzU3XHU2NUY2XHU4RjkzXHU1MUZBXHU1REYyXHU3RjEzXHU1QjU4XHU1MTg1XHU1QkI5XHJcblx0XHRcdFx0XHRpZiAoY3VycmVudFNwZWFrZXIgJiYgY3VycmVudENvbnRlbnQubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnJlbmRlckJ1YmJsZShjb250YWluZXIsIGN1cnJlbnRTcGVha2VyLCBzcGVha2VyQSwgY3VycmVudENvbnRlbnQuam9pbignXFxuJykpO1xyXG5cdFx0XHRcdFx0XHRjdXJyZW50Q29udGVudCA9IFtdO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFx1ODlFM1x1Njc5MFx1NjVCMFx1NTNEMVx1OEEwMFx1ODAwNVxyXG5cdFx0XHRcdFx0aWYgKGxpbmUuc3RhcnRzV2l0aChgJHtzcGVha2VyQX1cdUZGMUFgKSkge1xyXG5cdFx0XHRcdFx0XHRjdXJyZW50U3BlYWtlciA9IHNwZWFrZXJBO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBjb250ZW50ID0gbGluZS5zbGljZShzcGVha2VyQS5sZW5ndGggKyAxKS50cmltKCk7XHJcblx0XHRcdFx0XHRcdGlmIChjb250ZW50KSBjdXJyZW50Q29udGVudC5wdXNoKGNvbnRlbnQpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoYCR7c3BlYWtlckJ9XHVGRjFBYCkpIHtcclxuXHRcdFx0XHRcdFx0Y3VycmVudFNwZWFrZXIgPSBzcGVha2VyQjtcclxuXHRcdFx0XHRcdFx0Y29uc3QgY29udGVudCA9IGxpbmUuc2xpY2Uoc3BlYWtlckIubGVuZ3RoICsgMSkudHJpbSgpO1xyXG5cdFx0XHRcdFx0XHRpZiAoY29udGVudCkgY3VycmVudENvbnRlbnQucHVzaChjb250ZW50KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKGN1cnJlbnRTcGVha2VyKSB7XHJcblx0XHRcdFx0XHQvLyBcdTdEMkZcdTc5RUZcdTUxODVcdTVCQjlcdTg4NENcclxuXHRcdFx0XHRcdGN1cnJlbnRDb250ZW50LnB1c2gobGluZS50cmltKCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHQvLyBcdTU5MDRcdTc0MDZcdTY3MDBcdTU0MEVcdTRFMDBcdTRFMkFcdTU3NTdcclxuXHRcdFx0aWYgKGN1cnJlbnRTcGVha2VyICYmIGN1cnJlbnRDb250ZW50Lmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHR0aGlzLnJlbmRlckJ1YmJsZShjb250YWluZXIsIGN1cnJlbnRTcGVha2VyLCBzcGVha2VyQSwgY3VycmVudENvbnRlbnQuam9pbignXFxuJykpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVuZGVyQnViYmxlKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHNwZWFrZXI6IHN0cmluZywgc3BlYWtlckE6IHN0cmluZywgY29udGVudDogc3RyaW5nKSB7XHJcblx0XHRjb25zdCBpc0xlZnQgPSBzcGVha2VyID09PSBzcGVha2VyQTtcclxuXHRcdGNvbnN0IGJ1YmJsZSA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IGBjaGF0LWJ1YmJsZSAke2lzTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCd9YCB9KTtcclxuXHJcblx0XHQvLyBcdTg5RDJcdTgyNzJcdTY4MDdcdTdCN0VcclxuXHRcdGJ1YmJsZS5jcmVhdGVFbCgnZGl2Jywge1xyXG5cdFx0XHRjbHM6ICdyb2xlLXRhZycsXHJcblx0XHRcdHRleHQ6IGAke3NwZWFrZXJ9YFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gXHU1MTg1XHU1QkI5XHU1MzNBXHU1N0RGXHJcblx0XHRjb25zdCBjb250ZW50RGl2ID0gYnViYmxlLmNyZWF0ZURpdih7IGNsczogJ2NvbnRlbnQnIH0pO1xyXG5cdFx0Y29udGVudERpdi5pbm5lckhUTUwgPSBjb250ZW50XHJcblx0XHRcdC5yZXBsYWNlKC9cdUZGMDgoLio/KVx1RkYwOS9nLCAnPGVtIGNsYXNzPVwiYWN0aW9uXCI+JDE8L2VtPicpIC8vIFx1OEY2Q1x1NjM2Mlx1NTJBOFx1NEY1Q1x1NjNDRlx1OEZGMFxyXG5cdFx0XHQucmVwbGFjZSgvXFxuL2csICc8YnI+Jyk7IC8vIFx1NEZERFx1NzU1OVx1NjM2Mlx1ODg0Q1xyXG5cdH1cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBcUQ7QUFFckQsSUFBcUIsYUFBckIsY0FBd0MsdUJBQU87QUFBQSxFQUM5QyxNQUFNLFNBQVM7QUFFZCxTQUFLO0FBQUEsTUFDSixLQUFLLElBQUksVUFBVSxHQUFHLGVBQWUsQ0FBQyxNQUFNLFdBQVc7QUFDdEQsYUFBSyxRQUFRLENBQUMsU0FBUztBQUN0QixlQUNFLFNBQVMsc0NBQVEsRUFDakIsUUFBUSxnQkFBZ0IsRUFDeEIsUUFBUSxNQUFNO0FBQ2Qsa0JBQU0sV0FDTDtBQUtELG1CQUFPLGlCQUFpQixRQUFRO0FBQ2hDLG1CQUFPLFVBQVUsT0FBTyxVQUFVLEVBQUUsT0FBTyxHQUFHLENBQUM7QUFBQSxVQUNoRCxDQUFDO0FBQUEsUUFDSCxDQUFDO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDRjtBQUdBLFNBQUssbUNBQW1DLFdBQVcsQ0FBQyxRQUFRLElBQUksUUFBUTtBQUN2RSxZQUFNLFFBQVEsT0FBTyxNQUFNLElBQUk7QUFDL0IsWUFBTSxZQUFZLEdBQUcsVUFBVSxFQUFFLEtBQUssaUJBQWlCLENBQUM7QUFHeEQsWUFBTSxDQUFDLE9BQU8sT0FBTyxHQUFHLFlBQVksSUFBSTtBQUN4QyxZQUFNLFdBQVcsTUFBTSxRQUFRLFdBQU0sRUFBRSxFQUFFLEtBQUs7QUFDOUMsWUFBTSxXQUFXLE1BQU0sUUFBUSxXQUFNLEVBQUUsRUFBRSxLQUFLO0FBRzlDLFVBQUksaUJBQWdDO0FBQ3BDLFVBQUksaUJBQTJCLENBQUM7QUFHaEMsWUFBTSxhQUFhLENBQUMsU0FDbkIsS0FBSyxXQUFXLEdBQUcsZ0JBQVcsS0FDOUIsS0FBSyxXQUFXLEdBQUcsZ0JBQVcsS0FDOUIsS0FBSyxLQUFLLE1BQU07QUFHakIsbUJBQWEsUUFBUSxVQUFRO0FBQzVCLFlBQUksV0FBVyxJQUFJLEdBQUc7QUFFckIsY0FBSSxrQkFBa0IsZUFBZSxTQUFTLEdBQUc7QUFDaEQsaUJBQUssYUFBYSxXQUFXLGdCQUFnQixVQUFVLGVBQWUsS0FBSyxJQUFJLENBQUM7QUFDaEYsNkJBQWlCLENBQUM7QUFBQSxVQUNuQjtBQUdBLGNBQUksS0FBSyxXQUFXLEdBQUcsZ0JBQVcsR0FBRztBQUNwQyw2QkFBaUI7QUFDakIsa0JBQU0sVUFBVSxLQUFLLE1BQU0sU0FBUyxTQUFTLENBQUMsRUFBRSxLQUFLO0FBQ3JELGdCQUFJO0FBQVMsNkJBQWUsS0FBSyxPQUFPO0FBQUEsVUFDekMsV0FBVyxLQUFLLFdBQVcsR0FBRyxnQkFBVyxHQUFHO0FBQzNDLDZCQUFpQjtBQUNqQixrQkFBTSxVQUFVLEtBQUssTUFBTSxTQUFTLFNBQVMsQ0FBQyxFQUFFLEtBQUs7QUFDckQsZ0JBQUk7QUFBUyw2QkFBZSxLQUFLLE9BQU87QUFBQSxVQUN6QztBQUFBLFFBQ0QsV0FBVyxnQkFBZ0I7QUFFMUIseUJBQWUsS0FBSyxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQ2hDO0FBQUEsTUFDRCxDQUFDO0FBR0QsVUFBSSxrQkFBa0IsZUFBZSxTQUFTLEdBQUc7QUFDaEQsYUFBSyxhQUFhLFdBQVcsZ0JBQWdCLFVBQVUsZUFBZSxLQUFLLElBQUksQ0FBQztBQUFBLE1BQ2pGO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRVEsYUFBYSxXQUF3QixTQUFpQixVQUFrQixTQUFpQjtBQUNoRyxVQUFNLFNBQVMsWUFBWTtBQUMzQixVQUFNLFNBQVMsVUFBVSxVQUFVLEVBQUUsS0FBSyxlQUFlLFNBQVMsU0FBUyxVQUFVLENBQUM7QUFHdEYsV0FBTyxTQUFTLE9BQU87QUFBQSxNQUN0QixLQUFLO0FBQUEsTUFDTCxNQUFNLEdBQUc7QUFBQSxJQUNWLENBQUM7QUFHRCxVQUFNLGFBQWEsT0FBTyxVQUFVLEVBQUUsS0FBSyxVQUFVLENBQUM7QUFDdEQsZUFBVyxZQUFZLFFBQ3JCLFFBQVEsWUFBWSw0QkFBNEIsRUFDaEQsUUFBUSxPQUFPLE1BQU07QUFBQSxFQUN4QjtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
